// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Defficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem[]
  problemSolved ProblemSolved[]
  submissions Submission[]
}

model Problem {
  id           String   @id @default(uuid())
  title        String
  discription  String
  difficulty   Defficulty
  tag          String[]
  UserId       String
  example      Json
  constraints  String
  hint         String?
  editorial    String?

  testcases    Json
  codeSnippets Json
  referenceSoluction Json  

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

//Relatonship
  user  User   @relation(fields: [UserId], references: [id], onDelete: Cascade)
  solvedBy ProblemSolved[] 
  submissions  Submission[]   
}

model Submission{
  id           String   @id @default(uuid())
  UserId       String
  problemId    String
  socurCode    Json
  language     String
  stdin        String?
  stdout       String?
  stderr       String?
  compilerOutput String?
  status       String?
  memory       String?
  time         String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user  User   @relation(fields: [UserId], references: [id], onDelete: Cascade)
  problem  Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

 testCases TestCasesResult[]  
}

model TestCasesResult{
  id           String   @id @default(uuid())
  submissionId String
  testCases    Int
  passed       Boolean
  stdout       String
  expected     String
  stderr       String
  compilerOutput String
  status       String
  memory       String?
  time         String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

 @@index([submissionId]) 
}

model ProblemSolved{
  id           String   @id @default(uuid())
  UserId       String
  problemId    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user  User   @relation(fields: [UserId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([UserId, problemId])
}